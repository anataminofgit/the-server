/* const PubSub = require('pubsub-js');
const Greeting = require("../the-server/greeting");
const GiftCard = require("../the-server/giftCard");
const AccountCreated = require("../the-server/createAccount");

var RESPONSE_REGISTER_MSG = 'ResposeRegister';
var REGISTER_MSG = 'Register';
var GIFT_CARD_MSG = 'GiftCard';
var CREATE_ACCOUNT_MSG = 'CreateAcount';
var START_MSG = 'Start';
const MAX_RETRY = 3;
const MAX_DELAY = 200;
 */

//PubSub.immediateExceptions = true;

/* class ResistrationProcess{
    ResistrationProcess(){
        this.uuid = data.uuid,
        this.email = data.email,
        this.isGreetingSuccess = false,
        this.isGiftCardSuccess = false,      
        this.isCreatAccountSuccess= false,
        this.countCreateAccoutSent = 0,
        this.countGreetingSent = 0,
        this.countGiftCardSent = 0,
        this.timerObj = null,
        this.promiseResolve = null
    }
    
    proccessRun(){
    //   this.promniseGreeting = ;
    return new Promise((resolve, reject) => {
           this.sendGreeting().then((value,err) =>{
               if (value){
               // now sending the giftcard
               //   this.promniseGiftCard = this.sendGiftCard();
                   this.sendGiftCard().then((value,err)=>{
                       if (value){
                               // now sending the creat account
                       //  this.promiseCreateAccout = this.sendCreateAccount();
                           this.sendCreateAccount().then((value,err)=>{ 
                                   if (value)
                                       return resolve (true);
                                   else
                                       return resolve (false);
                                   }
                           ).catch(error => {
                               console.log(error.message);
   //                            return resolve (false);
                           })
                       }
                       else
                           return resolve (false);
                       }).catch(error => {
                           console.log(error.message);
   //                        return resolve (false);
                       });            
                   }
               else
                   return resolve (false);
           }).catch(error => {
               console.log(error.message);
   //            return resolve (false);
           })  
   })     
    } 
   
    async sendGreeting() {
               var isSuccess = false
               for (let i = 0; i < 3 || isSuccess; i++) {
                   try {
                       let promise = SendEmailMessage("Greeting",this.uuid, this.email);
                       isSuccess = await promise;
                       if (isSuccess){
                           return true;
                       }
                   }catch (error){
                       console.log("not success to send mail time=", i , "error is :", error);
                   }
               }
               return false;
    } */
        
   
    /* async sendGiftCard(){
        return true; */
        /*     return new Promise((resolve, reject) => {
               var sql = this.isExsistinTable ? this.sqlUPDATE : this.sqlINSERT;
               connection.query(sql, (err, result, fields )=>{
               console.log(sql);
               if (err){
                   this.isSuccess = false;
                 return reject(this.isSuccess);
                   }
               this.isSuccess = true;
               return resolve(this.isSuccess);
   
               })
           })  */
   
      /*  }
   
    async sendCreateAccount(){
           return true;
          /*  return new Promise((resolve, reject) => {
               var sql = this.isExsistinTable ? this.sqlUPDATE : this.sqlINSERT;
               connection.query(sql, (err, result, fields )=>{
               console.log(sql);
               if (err){
                   this.isSuccess = false;
                 return reject(this.isSuccess);
                   }
               this.isSuccess = true;
               return resolve(this.isSuccess);
   
               })
           }) 
   
    }
}
 */



 /* 
    
function fulfillPwithPromise(val) {  // Fulfills p with a promise val
    resolveP({promise: val});
} */

/* var HashMap = require('hashmap');
var db = new HashMap();  */

/* function rollbackRegistrationTimeout(uuid){
    console.log("timeout excecute ")
    if (db.has(uuid)){
        data = db.get(uuid)
        console.log("timeout excecute - the action = ", data.uuid ,data.action, data.isCreatAccountSuccess)
        data.isSuccess = false
        data.reason = "timeout"
        clearTimeout(data.timerObj)
        data.timerObj = null;
        db.delete(uuid)
        PubSub.publish(RESPONSE_REGISTER_MSG, data);
    }
    else
        console.log("rollbackRegistrationTimeout - no uuid");
}

function rollbackRegistration(uuid){
    if (db.has(uuid)){
        data = db.get(uuid)
        data.isSuccess = false
        data.reason = "server error"
        if (data.timerObj)
            clearTimeout(data.timerObj)
        data.timerObj = null;
        console.log("rollbackRegistration - timer stop", data.action)
        db.delete(uuid)
        PubSub.publish(RESPONSE_REGISTER_MSG, data);
    }
    else
        console.log("rollbackRegistration - no uuid");
}

function SuccessRegistration(uuid){
    if (db.has(uuid)){
        data = db.get(uuid);
        data.isSuccess = true;
        clearTimeout(data.timerObj)
        data.timerObj=null;
        db.delete(uuid);
        PubSub.publish(RESPONSE_REGISTER_MSG, data);
    }
    else
        console.log("error - duplicate delete uuid")
} */


/* async function sendMessage(data , msgToSend){
    var msgData = {
        uuid : data.uuid,
        email : data.email,
        action : null,
        isSuccess : false,
        message : msgToSend
    }


    let messageItem = {
        uuid : data.uuid,

    }
    registrationItem.action= msgToSend; 
    registrationItem.timerObj = setTimeout(rollbackRegistrationTimeout, MAX_DELAY, data.uuid );
    console.log("timer start", registrationItem.action,  registrationItem.timerObj._idleStart)    
    db.set(data.uuid, registrationItem);
    msgData.action = msgToSend

    ongoingMessages
    PubSub.publish(msgToSend, msgData);
} */



/* 

function sendMessage(registrationItem, data , msgToSend){
    var msgData = {
        uuid : data.uuid,
        email : data.email,
        action : null,
        isSuccess : false
    }
        
    registrationItem.action= msgToSend; 
    registrationItem.timerObj = setTimeout(rollbackRegistrationTimeout, MAX_DELAY, data.uuid );
    console.log("timer start", registrationItem.action,  registrationItem.timerObj._idleStart)    
    db.set(data.uuid, registrationItem);
    msgData.action = msgToSend
    PubSub.publish(msgToSend, msgData);
} */

/* PubSub.subscribe(REGISTER_MSG, function (msg, data) {

    
    var msgData = {
            uuid : data.uuid,
            email : data.email,
            action : null,
            isSuccess : false
        } 
        registrationItem = {
            uuid : data.uuid,
            email : data.email,
            isGreetingSuccess : false,
            isGiftCardSuccess : false,      
            isCreatAccountSuccess: false,
            countCreateAccoutSent : 0,
            countGreetingSent : 0,
            countGiftCardSent : 0,
            timerObj : null
            };
    

    return fulfillPwithPromise(true) ;       

    if (data.action != START_MSG){
        var itemExsist = db.has(data.uuid)
        if (itemExsist){
            registrationItem = db.get(data.uuid);
            console.log("stop timer = ", registrationItem.timerObj._idleStart)
            clearTimeout(registrationItem.timerObj)
            registrationItem.timerObj=null
        }
        else {
            console.log("check why not exsist", data.uuid,"action = ", data.action)
        }
    }

    if (data.action ===START_MSG){
        if (itemExsist)
            console.log("error- duplicate START ??? ")
        sendMessage(registrationItem, data , GREETING_MSG)
    }
    else if (data.action == GREETING_MSG){
        if (itemExsist){
            if(data.isSuccess){
                registrationItem.isGreetingSuccess=true;
                sendMessage(registrationItem, data , GIFT_CARD_MSG)
            }
            else{
                if(registrationItem.countGreetingSent < MAX_RETRY){
                    registrationItem.countGreetingSent = registrationItem.countGreetingSent+1
                    sendMessage(registrationItem, data , GREETING_MSG)
                }
                else
                    rollbackRegistration(data.uuid);
            }
        }
        else 
        rollbackRegistration(data.uuid)
    }
    else if (data.action ==GIFT_CARD_MSG){     
        if (itemExsist){
            if(data.isSuccess){
                registrationItem.isGiftCardSuccess=true;
                sendMessage(registrationItem, data , CREATE_ACCOUNT_MSG)
            }
            else{
                if(registrationItem.countGiftCardSent < MAX_RETRY){
                    registrationItem.countGiftCardSent = registrationItem.countGiftCardSent+1
                    sendMessage(registrationItem, data , GIFT_CARD_MSG)
                }
                else
                    rollbackRegistration(data.uuid);
            }
        }
        else 
            rollbackRegistration(data.uuid)
    }
    else if (data.action == CREATE_ACCOUNT_MSG){     
        if (itemExsist){
            if(data.isSuccess){
                SuccessRegistration(data.uuid);
            }
            else{
                if(registrationItem.countCreateAccoutSent < MAX_RETRY){
                    registrationItem.countCreateAccoutSent = registrationItem.countCreateAccoutSent+1
                    sendMessage(registrationItem, data , CREATE_ACCOUNT_MSG)
                }
                else
                    rollbackRegistration(data.uuid);
            }
        }
        else 
            rollbackRegistration(data.uuid)    
    }
}); 
  */
